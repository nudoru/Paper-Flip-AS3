package {	import com.greensock.*;	import com.greensock.easing.*;	import com.greensock.plugins.MotionBlurPlugin;	import com.greensock.plugins.TweenPlugin;	import com.zeropointnine.CurlingPlane;	import flash.display.*;	import flash.events.*;	import flash.geom.Point;	import flash.text.*;	import org.papervision3d.cameras.CameraType;	import org.papervision3d.materials.MovieMaterial;	import org.papervision3d.objects.DisplayObject3D;	import org.papervision3d.objects.primitives.Sphere;	import org.papervision3d.view.BasicView;	/**	 * Manages a "stack" of simulated pages 	 * 	 * Authow: Matt Perkins / kheavy@nudoru.com	 * Created: 11/2/10	 * Last updated: 11/2/10	 * 	 * Sample:		_View = new PaperFlipView();		_View.initialize({						width:800,						height:600						});		_View.render();		this.addChild(_View);		var page:Page1 = new Page1();		_View.addPage( {					id:"page1",					surface:page,					orientation:PaperFlipView.VERTICAL,					x:200,					y:100,					width:350,					height:400,					startCurl:180,					startZRot:0,					startXRot:0,					startYRot:0,					duration:1,					delay:0					});	 */	public class PaperFlipView extends Sprite {		protected var _3DLayer				:Sprite;		protected var _Pv3DView				:BasicView;		protected var _PageDO3d				:DisplayObject3D;				protected var _3DViewAreaWidth		:int;		protected var _3DViewAreaHeight		:int;				protected var _CameraTarget			:Sphere;		protected var _CameraX				:int = 0;		protected var _CameraY				:int = 0;		protected var _CameraZ				:int = -1000;		protected var _CameraF				:Number = 24;		protected var _Pages				:Array;		public static const HORIZONTAL		:String = "horizontal";		public static const VERTICAL		:String = "vertical";		/**		 * Calculates a "pixel perfect" Z depth with a 1:1 scale		 * http://www.everydayflash.com/blog/index.php/2008/07/07/pixel-precision-in-papervision3d/		 * 3dobj.z = ((camera.zoom - 1) * camera.focus) - Math.abs(camera.z)		 */		public function get pixelPerfectZ():Number 		{			return (_Pv3DView.cameraAsCamera3D.zoom * _Pv3DView.cameraAsCamera3D.focus) - Math.abs(_Pv3DView.cameraAsCamera3D.z)		}				/**		 * Constructor		 */		public function PaperFlipView():void 		{			super();		}		/**		 * Initialize		 * @param	data Object with the following props:		 *  id:"page1",		 *  surfaceLinkage:"linkageid",		 * 	surface:page,		 * 	orientation:PaperFlipView.VERTICAL,		 * 	x:200,		 * 	y:100,		 * 	width:350,		 * 	height:400,		 * 	startCurl:180,		 * 	startZRot:0,		 * 	startXRot:0,		 * 	startYRot:0,		 *  duration:1,		 * 	delay:0		 */		public function initialize(data:*= null):void 		{			TweenPlugin.activate([MotionBlurPlugin]);						_Pages = [];			_3DViewAreaWidth = data.width;			_3DViewAreaHeight = data.height;		}				/**		 * Start rendering		 */		public function render():void		{			_3DLayer = new Sprite();			this.addChild(_3DLayer);						_Pv3DView = new BasicView(_3DViewAreaWidth, _3DViewAreaHeight, false, true, CameraType.TARGET);			_3DLayer.addChild(_Pv3DView);						// give the camera something to look at			_CameraTarget = new Sphere(null);			_CameraTarget.visible = false;			_Pv3DView.scene.addChild(_CameraTarget);			_Pv3DView.cameraAsCamera3D.target = _CameraTarget;						_Pv3DView.cameraAsCamera3D.x = _CameraX;			_Pv3DView.cameraAsCamera3D.y = _CameraY;			_Pv3DView.cameraAsCamera3D.z = _CameraZ;			_Pv3DView.cameraAsCamera3D.focus = _CameraF;						_PageDO3d = new DisplayObject3D();			_PageDO3d.useOwnContainer = true;						// 0,0 defaults to the center so move it to the lower left			_PageDO3d.x -= _3DViewAreaWidth / 2;			_PageDO3d.y -= _3DViewAreaHeight / 2;			_Pv3DView.scene.addChild(_PageDO3d);			_Pv3DView.startRendering();		}				/**		 * Free look will move the camera around a little as the mouse moves over the stage		 */		public function startFreeLook():void		{			addEventListener(Event.ENTER_FRAME, doFreeLook);		}				public function stopFreeLook():void		{			removeEventListener(Event.ENTER_FRAME, doFreeLook);		}				/**		 * Handle free look		 * @param	e		 */		protected function doFreeLook(e:Event):void 		{			var mX:int = this.stage.mouseX;			var mY:int = this.stage.mouseY;			var cTx:int = _CameraX;			var cTy:int = _CameraY;			var cTz:int = _CameraZ;						if (mX > 0 && mX < this.stage.width && mY > 0 && mY < this.stage.height) {				cTx = mX - (this.stage.width >> 1)/2;				cTy = mY - (this.stage.height >> 1)/2;								cTz -= Point.distance(new Point(mX,mY), new Point((this.stage.width >> 1),(this.stage.height >> 1)));			}						TweenMax.to(_Pv3DView.cameraAsCamera3D, .25, { x:cTx, y:cTy, z:cTz, ease:Quad.easeOut } );		}				//----------------------------------------------------------------------------------------------------------------------------------		// PAGE				/**		 * Add a new page to the display		 * @param	pData		 */		public function addPage(pData:Object):void 		{						var mat:MovieMaterial;			var frame:MovieClip;			var graphic:MovieClip;						if (pData.surface) graphic = pData.surface;				else graphic = getArbitraryLibraryObject(pData.surfaceLinkage) as MovieClip;			if (pData.orientation == PaperFlipView.VERTICAL)			{				// hack to create a plane with the curl going top to bottom				// make a new movieclip attached the texture and then rotate it				// then rotate the CurlingPlane				var rot:MovieClip = new MovieClip();				rot.addChild(graphic);				graphic.rotation = -90;				mat = new MovieMaterial(rot, true, false, true);				var a:int = pData.width;				pData.width = pData.height;				pData.height = a;			} else {				mat = new MovieMaterial(graphic, true, false, true);			}			mat.doubleSided = true;			mat.smooth = true;						var x:int = int(pData.x);			// convert the Y value to the Flash coordinate system (0y at the top)			var y:int = _3DViewAreaHeight - int(pData.y) - (int(pData.height) >> 1);			var cpane:CurlingPlane = new CurlingPlane(mat);			cpane.useOwnContainer = true;			cpane.planeid = pData.id;			cpane.x = x;			cpane.y = y;			cpane.z = pixelPerfectZ;						if (pData.orientation == PaperFlipView.VERTICAL)			{				// X needs to be adjusted an additional 25 pixels for some reason				cpane.x += (pData.width / 2) - 25;				cpane.y += pData.height / 2;				cpane.rotationZ = -90;			}						_PageDO3d.addChild(cpane);						cpane.localRotationX = pData.startXRot ? pData.startXRot : 0;			cpane.localRotationY = pData.startYRot ? pData.startYRot : 0;			cpane.localRotationZ = pData.startZRot ? pData.startZRot : 0;			cpane.curl = pData.startCurl;						var duration:Number = pData.duration ? pData.duration : 2;						// animate it to flat			TweenMax.to(cpane, duration, {localRotationX:0, localRotationY:0, localRotationZ:0, curl:0, ease:Quad.easeOut, delay:pData.delay } );			_Pages.push(cpane);		}		//----------------------------------------------------------------------------------------------------------------------------------		// UTILITY				/**		 * Gets an object from the library via it's linkage ID		 * @param	linkage		 * @return		 */		protected function getArbitraryLibraryObject(linkage:String):Object 		{			var objC:Class = Class(this.loaderInfo.applicationDomain.getDefinition(linkage));			var obj:Object = Object(new objC());			return obj;		}				//----------------------------------------------------------------------------------------------------------------------------------		// DESTROY				/**		 * Gets the index of the specific page in the _Pages array		 * @param	id		 * @return		 */		public function getPageIndexByID(id:String):int 		{			for (var i:int = 0, len:int=_Pages.length; i < len; i++) {				if (_Pages[i].planeid == id) return i;			}			return -1;		}				/**		 * Animate out a specific page		 * @param	id	ID of the page to tween out		 * @param	animation	Tween style		 */		public function tweenOutPageID(id:String, animation:String = ""):void 		{			var idx:int = getPageIndexByID(id);			if (idx > -1) animateOutPage(animation, _Pages[idx], onPageTweenOutComplete, [idx]);		}				/**		 * Removes the page object from the display and stack after the tween is done		 * @param	index		 */		protected function onPageTweenOutComplete(index:int):void		{			_PageDO3d.removeChild(_Pages.splice(index, 1)[0] as CurlingPlane);		}				/**		 * Animates all pages out		 */		public function tweenOutAllPages(animation:String = ""):void 		{			for (var i:int = 0, len:int=_Pages.length; i < len; i++) {				animateOutPage(animation, _Pages[i], removeAllPages, []);			}		}		/**		 * Performs the tween out animations		 * @param	animation	Style of tween to use		 * @param	page	Page to tween out		 * @param	completeFunc	Call this function when the tween is done (to remove the object)		 * @param	completeFParms	Array of params to pass to the completeFunc		 */		protected function animateOutPage(animation:String, page:CurlingPlane, completeFunc:Function, completeFParms:Array):void		{			var tx:int = page.x;			var ty:int = page.y;			var tz:int = page.z;			var tlrx:int = page.localRotationX;			var tlry:int = page.localRotationY;			var tlrz:int = page.localRotationZ;			var tcurl:int = 180;						if (animation == "rip_down")			{				ty = -100;				tz = -300;				tlrz = 45;				tcurl = 45;			}						if (animation == "rip_up")			{				ty = 1000;				tz = -300;				tlrz = 45;			}						TweenMax.to(page, 1, { x:tx, y:ty, z:tz, localRotationX:tlrx, localRotationY:tlry, localRotationZ:tlrz, curl:tcurl, ease:Quad.easeIn, onComplete:completeFunc, onCompleteParams:completeFParms } );		}				/**		 * Removes all pages either after the tweenOutAllPages() or directly		 */		public function removeAllPages():void 		{			for (var i:int = 0, len:int=_Pages.length; i < len; i++) {				_PageDO3d.removeChild(_Pages[i]);			}			_Pages = [];		}				/**		 * Stops any tweens in the view		 */		protected function stopAllTweens():void 		{			TweenMax.killTweensOf(_Pv3DView.cameraAsCamera3D);			for (var k:int = 0; k <_Pages.length; k++) {				TweenMax.killTweensOf(_Pages[k]);			}		}				/**		 * Removes everything and frees up memory		 */		public function destroy()		{			stopFreeLook();						stopAllTweens();			removeAllPages();						_Pv3DView.stopRendering();			_Pv3DView.renderer.destroy();			_Pv3DView.viewport.destroy();			_3DLayer.removeChild(_Pv3DView);			_Pv3DView = null;			this.removeChild(_3DLayer);			_3DLayer = null;		}	}	}